
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model Product {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  description String
  imageUrl    String
  name        String
  price       Int
  quantity    Int        @default(100)
  cartItems   CartItem[]

  @@map("products")
}

model Cart {
  id                      String                @id @default(uuid())
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  userId                  String?               
  user                    User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  items                   CartItem[]
  shipping                ShippingInformation[]
  selectedShippingAddress String?               
  currency                String            @default("USD") // USD | EUR | GBP

  @@map("carts")
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String  
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int

  @@map("cartItems")
}

model ShippingInformation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartId    String   
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  name      String
  address   String
  city      String
  postal    String
  country   String

  @@map("shippingInformation")
}

// https://next-auth.js.org/v3/adapters/prisma

model Account {
  id                String  @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId            String  
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessionToken String   @unique
  userId       String   
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid()) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]
  role          String  @default("USER") // USER | ADMIN  

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(uuid()) 
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
